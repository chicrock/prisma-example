// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  chat: (where?: chatWhereInput) => Promise<boolean>;
  message: (where?: messageWhereInput) => Promise<boolean>;
  place: (where?: placeWhereInput) => Promise<boolean>;
  ride: (where?: rideWhereInput) => Promise<boolean>;
  user: (where?: userWhereInput) => Promise<boolean>;
  verification: (where?: verificationWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chat: (where: chatWhereUniqueInput) => chatPromise;
  chats: (
    args?: {
      where?: chatWhereInput;
      orderBy?: chatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<chat>;
  chatsConnection: (
    args?: {
      where?: chatWhereInput;
      orderBy?: chatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => chatConnectionPromise;
  message: (where: messageWhereUniqueInput) => messagePromise;
  messages: (
    args?: {
      where?: messageWhereInput;
      orderBy?: messageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<message>;
  messagesConnection: (
    args?: {
      where?: messageWhereInput;
      orderBy?: messageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => messageConnectionPromise;
  place: (where: placeWhereUniqueInput) => placePromise;
  places: (
    args?: {
      where?: placeWhereInput;
      orderBy?: placeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<place>;
  placesConnection: (
    args?: {
      where?: placeWhereInput;
      orderBy?: placeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => placeConnectionPromise;
  ride: (where: rideWhereUniqueInput) => ridePromise;
  rides: (
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ride>;
  ridesConnection: (
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => rideConnectionPromise;
  user: (where: userWhereUniqueInput) => userPromise;
  users: (
    args?: {
      where?: userWhereInput;
      orderBy?: userOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<user>;
  usersConnection: (
    args?: {
      where?: userWhereInput;
      orderBy?: userOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => userConnectionPromise;
  verification: (where: verificationWhereUniqueInput) => verificationPromise;
  verifications: (
    args?: {
      where?: verificationWhereInput;
      orderBy?: verificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<verification>;
  verificationsConnection: (
    args?: {
      where?: verificationWhereInput;
      orderBy?: verificationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => verificationConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createchat: (data: chatCreateInput) => chatPromise;
  updatechat: (
    args: { data: chatUpdateInput; where: chatWhereUniqueInput }
  ) => chatPromise;
  upsertchat: (
    args: {
      where: chatWhereUniqueInput;
      create: chatCreateInput;
      update: chatUpdateInput;
    }
  ) => chatPromise;
  deletechat: (where: chatWhereUniqueInput) => chatPromise;
  deleteManychats: (where?: chatWhereInput) => BatchPayloadPromise;
  createmessage: (data: messageCreateInput) => messagePromise;
  updatemessage: (
    args: { data: messageUpdateInput; where: messageWhereUniqueInput }
  ) => messagePromise;
  updateManymessages: (
    args: { data: messageUpdateManyMutationInput; where?: messageWhereInput }
  ) => BatchPayloadPromise;
  upsertmessage: (
    args: {
      where: messageWhereUniqueInput;
      create: messageCreateInput;
      update: messageUpdateInput;
    }
  ) => messagePromise;
  deletemessage: (where: messageWhereUniqueInput) => messagePromise;
  deleteManymessages: (where?: messageWhereInput) => BatchPayloadPromise;
  createplace: (data: placeCreateInput) => placePromise;
  updateplace: (
    args: { data: placeUpdateInput; where: placeWhereUniqueInput }
  ) => placePromise;
  updateManyplaces: (
    args: { data: placeUpdateManyMutationInput; where?: placeWhereInput }
  ) => BatchPayloadPromise;
  upsertplace: (
    args: {
      where: placeWhereUniqueInput;
      create: placeCreateInput;
      update: placeUpdateInput;
    }
  ) => placePromise;
  deleteplace: (where: placeWhereUniqueInput) => placePromise;
  deleteManyplaces: (where?: placeWhereInput) => BatchPayloadPromise;
  createride: (data: rideCreateInput) => ridePromise;
  updateride: (
    args: { data: rideUpdateInput; where: rideWhereUniqueInput }
  ) => ridePromise;
  updateManyrides: (
    args: { data: rideUpdateManyMutationInput; where?: rideWhereInput }
  ) => BatchPayloadPromise;
  upsertride: (
    args: {
      where: rideWhereUniqueInput;
      create: rideCreateInput;
      update: rideUpdateInput;
    }
  ) => ridePromise;
  deleteride: (where: rideWhereUniqueInput) => ridePromise;
  deleteManyrides: (where?: rideWhereInput) => BatchPayloadPromise;
  createuser: (data: userCreateInput) => userPromise;
  updateuser: (
    args: { data: userUpdateInput; where: userWhereUniqueInput }
  ) => userPromise;
  updateManyusers: (
    args: { data: userUpdateManyMutationInput; where?: userWhereInput }
  ) => BatchPayloadPromise;
  upsertuser: (
    args: {
      where: userWhereUniqueInput;
      create: userCreateInput;
      update: userUpdateInput;
    }
  ) => userPromise;
  deleteuser: (where: userWhereUniqueInput) => userPromise;
  deleteManyusers: (where?: userWhereInput) => BatchPayloadPromise;
  createverification: (data: verificationCreateInput) => verificationPromise;
  updateverification: (
    args: { data: verificationUpdateInput; where: verificationWhereUniqueInput }
  ) => verificationPromise;
  updateManyverifications: (
    args: {
      data: verificationUpdateManyMutationInput;
      where?: verificationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertverification: (
    args: {
      where: verificationWhereUniqueInput;
      create: verificationCreateInput;
      update: verificationUpdateInput;
    }
  ) => verificationPromise;
  deleteverification: (
    where: verificationWhereUniqueInput
  ) => verificationPromise;
  deleteManyverifications: (
    where?: verificationWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chat: (
    where?: chatSubscriptionWhereInput
  ) => chatSubscriptionPayloadSubscription;
  message: (
    where?: messageSubscriptionWhereInput
  ) => messageSubscriptionPayloadSubscription;
  place: (
    where?: placeSubscriptionWhereInput
  ) => placeSubscriptionPayloadSubscription;
  ride: (
    where?: rideSubscriptionWhereInput
  ) => rideSubscriptionPayloadSubscription;
  user: (
    where?: userSubscriptionWhereInput
  ) => userSubscriptionPayloadSubscription;
  verification: (
    where?: verificationSubscriptionWhereInput
  ) => verificationSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type rideOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "pickupAddress_ASC"
  | "pickupAddress_DESC"
  | "pickupLat_ASC"
  | "pickupLat_DESC"
  | "pickupLng_ASC"
  | "pickupLng_DESC"
  | "dropOffAddress_ASC"
  | "dropOffAddress_DESC"
  | "dropOffLat_ASC"
  | "dropOffLat_DESC"
  | "dropOffLng_ASC"
  | "dropOffLng_DESC"
  | "price_ASC"
  | "price_DESC"
  | "distance_ASC"
  | "distance_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type placeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "address_ASC"
  | "address_DESC"
  | "isFav_ASC"
  | "isFav_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type messageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type chatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type userOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "verifiedEmail_ASC"
  | "verifiedEmail_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "age_ASC"
  | "age_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "verifiedPhoneNumber_ASC"
  | "verifiedPhoneNumber_DESC"
  | "profilePhoto_ASC"
  | "profilePhoto_DESC"
  | "isDriving_ASC"
  | "isDriving_DESC"
  | "isRiding_ASC"
  | "isRiding_DESC"
  | "isTaken_ASC"
  | "isTaken_DESC"
  | "lastLng_ASC"
  | "lastLng_DESC"
  | "lastLat_ASC"
  | "lastLat_DESC"
  | "lastOrientation_ASC"
  | "lastOrientation_DESC"
  | "fbId_ASC"
  | "fbId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type verificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "target_ASC"
  | "target_DESC"
  | "payload_ASC"
  | "payload_DESC"
  | "key_ASC"
  | "key_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface chatUpdateOneWithoutRideInput {
  create?: chatCreateWithoutRideInput;
  update?: chatUpdateWithoutRideDataInput;
  upsert?: chatUpsertWithoutRideInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: chatWhereUniqueInput;
}

export type chatWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface userCreateOneWithoutRideAsDriverInput {
  create?: userCreateWithoutRideAsDriverInput;
  connect?: userWhereUniqueInput;
}

export interface chatUpsertWithoutRideInput {
  update: chatUpdateWithoutRideDataInput;
  create: chatCreateWithoutRideInput;
}

export interface userCreateWithoutRideAsDriverInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideCreateManyWithoutPassengerInput;
  place?: placeCreateManyWithoutUserInput;
  message?: messageCreateManyWithoutUserInput;
  chat?: chatCreateOneInput;
}

export interface userUpdateWithoutMessageDataInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideUpdateManyWithoutPassengerInput;
  rideAsDriver?: rideUpdateManyWithoutDriverInput;
  place?: placeUpdateManyWithoutUserInput;
  chat?: chatUpdateOneInput;
}

export interface placeCreateManyWithoutUserInput {
  create?: placeCreateWithoutUserInput[] | placeCreateWithoutUserInput;
  connect?: placeWhereUniqueInput[] | placeWhereUniqueInput;
}

export interface placeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  lat?: Float;
  lat_not?: Float;
  lat_in?: Float[] | Float;
  lat_not_in?: Float[] | Float;
  lat_lt?: Float;
  lat_lte?: Float;
  lat_gt?: Float;
  lat_gte?: Float;
  lng?: Float;
  lng_not?: Float;
  lng_in?: Float[] | Float;
  lng_not_in?: Float[] | Float;
  lng_lt?: Float;
  lng_lte?: Float;
  lng_gt?: Float;
  lng_gte?: Float;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  isFav?: Boolean;
  isFav_not?: Boolean;
  user?: userWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: placeWhereInput[] | placeWhereInput;
  OR?: placeWhereInput[] | placeWhereInput;
  NOT?: placeWhereInput[] | placeWhereInput;
}

export interface placeCreateWithoutUserInput {
  name: String;
  lat?: Float;
  lng?: Float;
  address: String;
  isFav?: Boolean;
}

export interface chatWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  ride?: rideWhereInput;
  message?: messageWhereInput;
  AND?: chatWhereInput[] | chatWhereInput;
  OR?: chatWhereInput[] | chatWhereInput;
  NOT?: chatWhereInput[] | chatWhereInput;
}

export interface messageCreateManyWithoutUserInput {
  create?: messageCreateWithoutUserInput[] | messageCreateWithoutUserInput;
  connect?: messageWhereUniqueInput[] | messageWhereUniqueInput;
}

export interface userSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: userWhereInput;
  AND?: userSubscriptionWhereInput[] | userSubscriptionWhereInput;
  OR?: userSubscriptionWhereInput[] | userSubscriptionWhereInput;
  NOT?: userSubscriptionWhereInput[] | userSubscriptionWhereInput;
}

export interface messageCreateWithoutUserInput {
  text: String;
  chat?: chatCreateOneWithoutMessageInput;
}

export interface placeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: placeWhereInput;
  AND?: placeSubscriptionWhereInput[] | placeSubscriptionWhereInput;
  OR?: placeSubscriptionWhereInput[] | placeSubscriptionWhereInput;
  NOT?: placeSubscriptionWhereInput[] | placeSubscriptionWhereInput;
}

export interface chatCreateOneWithoutMessageInput {
  create?: chatCreateWithoutMessageInput;
  connect?: chatWhereUniqueInput;
}

export interface chatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: chatWhereInput;
  AND?: chatSubscriptionWhereInput[] | chatSubscriptionWhereInput;
  OR?: chatSubscriptionWhereInput[] | chatSubscriptionWhereInput;
  NOT?: chatSubscriptionWhereInput[] | chatSubscriptionWhereInput;
}

export interface chatCreateWithoutMessageInput {
  ride?: rideCreateOneWithoutChatInput;
}

export interface verificationUpdateInput {
  target?: String;
  payload?: String;
  key?: String;
  verified?: Boolean;
}

export interface chatCreateOneInput {
  create?: chatCreateInput;
  connect?: chatWhereUniqueInput;
}

export interface userUpdateManyMutationInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
}

export interface chatUpdateInput {
  ride?: rideUpdateOneWithoutChatInput;
  message?: messageUpdateOneWithoutChatInput;
}

export interface userUpdateInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideUpdateManyWithoutPassengerInput;
  rideAsDriver?: rideUpdateManyWithoutDriverInput;
  place?: placeUpdateManyWithoutUserInput;
  message?: messageUpdateManyWithoutUserInput;
  chat?: chatUpdateOneInput;
}

export interface rideUpdateOneWithoutChatInput {
  create?: rideCreateWithoutChatInput;
  update?: rideUpdateWithoutChatDataInput;
  upsert?: rideUpsertWithoutChatInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: rideWhereUniqueInput;
}

export interface rideUpdateManyMutationInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
}

export interface rideUpdateWithoutChatDataInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
  passenger?: userUpdateOneWithoutRideAsPassengerInput;
  driver?: userUpdateOneWithoutRideAsDriverInput;
}

export interface rideUpdateInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
  passenger?: userUpdateOneWithoutRideAsPassengerInput;
  driver?: userUpdateOneWithoutRideAsDriverInput;
  chat?: chatUpdateOneWithoutRideInput;
}

export interface userUpdateOneWithoutRideAsPassengerInput {
  create?: userCreateWithoutRideAsPassengerInput;
  update?: userUpdateWithoutRideAsPassengerDataInput;
  upsert?: userUpsertWithoutRideAsPassengerInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: userWhereUniqueInput;
}

export interface placeUpdateManyMutationInput {
  name?: String;
  lat?: Float;
  lng?: Float;
  address?: String;
  isFav?: Boolean;
}

export interface userUpdateWithoutRideAsPassengerDataInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsDriver?: rideUpdateManyWithoutDriverInput;
  place?: placeUpdateManyWithoutUserInput;
  message?: messageUpdateManyWithoutUserInput;
  chat?: chatUpdateOneInput;
}

export interface userUpsertWithoutPlaceInput {
  update: userUpdateWithoutPlaceDataInput;
  create: userCreateWithoutPlaceInput;
}

export interface rideUpdateManyWithoutDriverInput {
  create?: rideCreateWithoutDriverInput[] | rideCreateWithoutDriverInput;
  delete?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  connect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  set?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  disconnect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  update?:
    | rideUpdateWithWhereUniqueWithoutDriverInput[]
    | rideUpdateWithWhereUniqueWithoutDriverInput;
  upsert?:
    | rideUpsertWithWhereUniqueWithoutDriverInput[]
    | rideUpsertWithWhereUniqueWithoutDriverInput;
  deleteMany?: rideScalarWhereInput[] | rideScalarWhereInput;
  updateMany?:
    | rideUpdateManyWithWhereNestedInput[]
    | rideUpdateManyWithWhereNestedInput;
}

export interface userUpdateOneWithoutPlaceInput {
  create?: userCreateWithoutPlaceInput;
  update?: userUpdateWithoutPlaceDataInput;
  upsert?: userUpsertWithoutPlaceInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: userWhereUniqueInput;
}

export interface rideUpdateWithWhereUniqueWithoutDriverInput {
  where: rideWhereUniqueInput;
  data: rideUpdateWithoutDriverDataInput;
}

export interface placeUpdateInput {
  name?: String;
  lat?: Float;
  lng?: Float;
  address?: String;
  isFav?: Boolean;
  user?: userUpdateOneWithoutPlaceInput;
}

export interface rideUpdateWithoutDriverDataInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
  passenger?: userUpdateOneWithoutRideAsPassengerInput;
  chat?: chatUpdateOneWithoutRideInput;
}

export interface userCreateOneWithoutPlaceInput {
  create?: userCreateWithoutPlaceInput;
  connect?: userWhereUniqueInput;
}

export interface rideUpsertWithWhereUniqueWithoutDriverInput {
  where: rideWhereUniqueInput;
  update: rideUpdateWithoutDriverDataInput;
  create: rideCreateWithoutDriverInput;
}

export type verificationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface chatUpdateWithoutRideDataInput {
  message?: messageUpdateOneWithoutChatInput;
}

export interface verificationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  target?: String;
  target_not?: String;
  target_in?: String[] | String;
  target_not_in?: String[] | String;
  target_lt?: String;
  target_lte?: String;
  target_gt?: String;
  target_gte?: String;
  target_contains?: String;
  target_not_contains?: String;
  target_starts_with?: String;
  target_not_starts_with?: String;
  target_ends_with?: String;
  target_not_ends_with?: String;
  payload?: String;
  payload_not?: String;
  payload_in?: String[] | String;
  payload_not_in?: String[] | String;
  payload_lt?: String;
  payload_lte?: String;
  payload_gt?: String;
  payload_gte?: String;
  payload_contains?: String;
  payload_not_contains?: String;
  payload_starts_with?: String;
  payload_not_starts_with?: String;
  payload_ends_with?: String;
  payload_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: verificationWhereInput[] | verificationWhereInput;
  OR?: verificationWhereInput[] | verificationWhereInput;
  NOT?: verificationWhereInput[] | verificationWhereInput;
}

export interface messageUpdateOneWithoutChatInput {
  create?: messageCreateWithoutChatInput;
  update?: messageUpdateWithoutChatDataInput;
  upsert?: messageUpsertWithoutChatInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: messageWhereUniqueInput;
}

export interface messageCreateInput {
  text: String;
  chat?: chatCreateOneWithoutMessageInput;
  user?: userCreateOneWithoutMessageInput;
}

export interface messageUpdateWithoutChatDataInput {
  text?: String;
  user?: userUpdateOneWithoutMessageInput;
}

export interface userUpsertWithoutRideAsPassengerInput {
  update: userUpdateWithoutRideAsPassengerDataInput;
  create: userCreateWithoutRideAsPassengerInput;
}

export interface userUpdateOneWithoutMessageInput {
  create?: userCreateWithoutMessageInput;
  update?: userUpdateWithoutMessageDataInput;
  upsert?: userUpsertWithoutMessageInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: userWhereUniqueInput;
}

export interface chatCreateInput {
  ride?: rideCreateOneWithoutChatInput;
  message?: messageCreateOneWithoutChatInput;
}

export interface rideWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  pickupAddress?: String;
  pickupAddress_not?: String;
  pickupAddress_in?: String[] | String;
  pickupAddress_not_in?: String[] | String;
  pickupAddress_lt?: String;
  pickupAddress_lte?: String;
  pickupAddress_gt?: String;
  pickupAddress_gte?: String;
  pickupAddress_contains?: String;
  pickupAddress_not_contains?: String;
  pickupAddress_starts_with?: String;
  pickupAddress_not_starts_with?: String;
  pickupAddress_ends_with?: String;
  pickupAddress_not_ends_with?: String;
  pickupLat?: Float;
  pickupLat_not?: Float;
  pickupLat_in?: Float[] | Float;
  pickupLat_not_in?: Float[] | Float;
  pickupLat_lt?: Float;
  pickupLat_lte?: Float;
  pickupLat_gt?: Float;
  pickupLat_gte?: Float;
  pickupLng?: Float;
  pickupLng_not?: Float;
  pickupLng_in?: Float[] | Float;
  pickupLng_not_in?: Float[] | Float;
  pickupLng_lt?: Float;
  pickupLng_lte?: Float;
  pickupLng_gt?: Float;
  pickupLng_gte?: Float;
  dropOffAddress?: String;
  dropOffAddress_not?: String;
  dropOffAddress_in?: String[] | String;
  dropOffAddress_not_in?: String[] | String;
  dropOffAddress_lt?: String;
  dropOffAddress_lte?: String;
  dropOffAddress_gt?: String;
  dropOffAddress_gte?: String;
  dropOffAddress_contains?: String;
  dropOffAddress_not_contains?: String;
  dropOffAddress_starts_with?: String;
  dropOffAddress_not_starts_with?: String;
  dropOffAddress_ends_with?: String;
  dropOffAddress_not_ends_with?: String;
  dropOffLat?: Float;
  dropOffLat_not?: Float;
  dropOffLat_in?: Float[] | Float;
  dropOffLat_not_in?: Float[] | Float;
  dropOffLat_lt?: Float;
  dropOffLat_lte?: Float;
  dropOffLat_gt?: Float;
  dropOffLat_gte?: Float;
  dropOffLng?: Float;
  dropOffLng_not?: Float;
  dropOffLng_in?: Float[] | Float;
  dropOffLng_not_in?: Float[] | Float;
  dropOffLng_lt?: Float;
  dropOffLng_lte?: Float;
  dropOffLng_gt?: Float;
  dropOffLng_gte?: Float;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  distance?: String;
  distance_not?: String;
  distance_in?: String[] | String;
  distance_not_in?: String[] | String;
  distance_lt?: String;
  distance_lte?: String;
  distance_gt?: String;
  distance_gte?: String;
  distance_contains?: String;
  distance_not_contains?: String;
  distance_starts_with?: String;
  distance_not_starts_with?: String;
  distance_ends_with?: String;
  distance_not_ends_with?: String;
  duration?: String;
  duration_not?: String;
  duration_in?: String[] | String;
  duration_not_in?: String[] | String;
  duration_lt?: String;
  duration_lte?: String;
  duration_gt?: String;
  duration_gte?: String;
  duration_contains?: String;
  duration_not_contains?: String;
  duration_starts_with?: String;
  duration_not_starts_with?: String;
  duration_ends_with?: String;
  duration_not_ends_with?: String;
  passenger?: userWhereInput;
  driver?: userWhereInput;
  chat?: chatWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: rideWhereInput[] | rideWhereInput;
  OR?: rideWhereInput[] | rideWhereInput;
  NOT?: rideWhereInput[] | rideWhereInput;
}

export interface rideCreateWithoutChatInput {
  status?: String;
  pickupAddress: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance: String;
  duration: String;
  passenger?: userCreateOneWithoutRideAsPassengerInput;
  driver?: userCreateOneWithoutRideAsDriverInput;
}

export interface rideUpdateManyWithoutPassengerInput {
  create?: rideCreateWithoutPassengerInput[] | rideCreateWithoutPassengerInput;
  delete?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  connect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  set?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  disconnect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
  update?:
    | rideUpdateWithWhereUniqueWithoutPassengerInput[]
    | rideUpdateWithWhereUniqueWithoutPassengerInput;
  upsert?:
    | rideUpsertWithWhereUniqueWithoutPassengerInput[]
    | rideUpsertWithWhereUniqueWithoutPassengerInput;
  deleteMany?: rideScalarWhereInput[] | rideScalarWhereInput;
  updateMany?:
    | rideUpdateManyWithWhereNestedInput[]
    | rideUpdateManyWithWhereNestedInput;
}

export interface userCreateWithoutRideAsPassengerInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsDriver?: rideCreateManyWithoutDriverInput;
  place?: placeCreateManyWithoutUserInput;
  message?: messageCreateManyWithoutUserInput;
  chat?: chatCreateOneInput;
}

export interface rideUpdateWithWhereUniqueWithoutPassengerInput {
  where: rideWhereUniqueInput;
  data: rideUpdateWithoutPassengerDataInput;
}

export interface rideCreateWithoutDriverInput {
  status?: String;
  pickupAddress: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance: String;
  duration: String;
  passenger?: userCreateOneWithoutRideAsPassengerInput;
  chat?: chatCreateOneWithoutRideInput;
}

export interface rideUpdateWithoutPassengerDataInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
  driver?: userUpdateOneWithoutRideAsDriverInput;
  chat?: chatUpdateOneWithoutRideInput;
}

export interface chatCreateWithoutRideInput {
  message?: messageCreateOneWithoutChatInput;
}

export interface userUpdateOneWithoutRideAsDriverInput {
  create?: userCreateWithoutRideAsDriverInput;
  update?: userUpdateWithoutRideAsDriverDataInput;
  upsert?: userUpsertWithoutRideAsDriverInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: userWhereUniqueInput;
}

export interface messageCreateWithoutChatInput {
  text: String;
  user?: userCreateOneWithoutMessageInput;
}

export interface userUpdateWithoutRideAsDriverDataInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideUpdateManyWithoutPassengerInput;
  place?: placeUpdateManyWithoutUserInput;
  message?: messageUpdateManyWithoutUserInput;
  chat?: chatUpdateOneInput;
}

export interface userCreateWithoutMessageInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideCreateManyWithoutPassengerInput;
  rideAsDriver?: rideCreateManyWithoutDriverInput;
  place?: placeCreateManyWithoutUserInput;
  chat?: chatCreateOneInput;
}

export interface placeUpdateManyWithoutUserInput {
  create?: placeCreateWithoutUserInput[] | placeCreateWithoutUserInput;
  delete?: placeWhereUniqueInput[] | placeWhereUniqueInput;
  connect?: placeWhereUniqueInput[] | placeWhereUniqueInput;
  set?: placeWhereUniqueInput[] | placeWhereUniqueInput;
  disconnect?: placeWhereUniqueInput[] | placeWhereUniqueInput;
  update?:
    | placeUpdateWithWhereUniqueWithoutUserInput[]
    | placeUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | placeUpsertWithWhereUniqueWithoutUserInput[]
    | placeUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: placeScalarWhereInput[] | placeScalarWhereInput;
  updateMany?:
    | placeUpdateManyWithWhereNestedInput[]
    | placeUpdateManyWithWhereNestedInput;
}

export interface rideCreateWithoutPassengerInput {
  status?: String;
  pickupAddress: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance: String;
  duration: String;
  driver?: userCreateOneWithoutRideAsDriverInput;
  chat?: chatCreateOneWithoutRideInput;
}

export interface placeUpdateWithWhereUniqueWithoutUserInput {
  where: placeWhereUniqueInput;
  data: placeUpdateWithoutUserDataInput;
}

export interface messageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  chat?: chatWhereInput;
  user?: userWhereInput;
  AND?: messageWhereInput[] | messageWhereInput;
  OR?: messageWhereInput[] | messageWhereInput;
  NOT?: messageWhereInput[] | messageWhereInput;
}

export interface placeUpdateWithoutUserDataInput {
  name?: String;
  lat?: Float;
  lng?: Float;
  address?: String;
  isFav?: Boolean;
}

export interface rideSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: rideWhereInput;
  AND?: rideSubscriptionWhereInput[] | rideSubscriptionWhereInput;
  OR?: rideSubscriptionWhereInput[] | rideSubscriptionWhereInput;
  NOT?: rideSubscriptionWhereInput[] | rideSubscriptionWhereInput;
}

export interface placeUpsertWithWhereUniqueWithoutUserInput {
  where: placeWhereUniqueInput;
  update: placeUpdateWithoutUserDataInput;
  create: placeCreateWithoutUserInput;
}

export interface verificationUpdateManyMutationInput {
  target?: String;
  payload?: String;
  key?: String;
  verified?: Boolean;
}

export interface placeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  lat?: Float;
  lat_not?: Float;
  lat_in?: Float[] | Float;
  lat_not_in?: Float[] | Float;
  lat_lt?: Float;
  lat_lte?: Float;
  lat_gt?: Float;
  lat_gte?: Float;
  lng?: Float;
  lng_not?: Float;
  lng_in?: Float[] | Float;
  lng_not_in?: Float[] | Float;
  lng_lt?: Float;
  lng_lte?: Float;
  lng_gt?: Float;
  lng_gte?: Float;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  isFav?: Boolean;
  isFav_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: placeScalarWhereInput[] | placeScalarWhereInput;
  OR?: placeScalarWhereInput[] | placeScalarWhereInput;
  NOT?: placeScalarWhereInput[] | placeScalarWhereInput;
}

export type messageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface placeUpdateManyWithWhereNestedInput {
  where: placeScalarWhereInput;
  data: placeUpdateManyDataInput;
}

export type placeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface placeUpdateManyDataInput {
  name?: String;
  lat?: Float;
  lng?: Float;
  address?: String;
  isFav?: Boolean;
}

export type rideWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface messageUpdateManyWithoutUserInput {
  create?: messageCreateWithoutUserInput[] | messageCreateWithoutUserInput;
  delete?: messageWhereUniqueInput[] | messageWhereUniqueInput;
  connect?: messageWhereUniqueInput[] | messageWhereUniqueInput;
  set?: messageWhereUniqueInput[] | messageWhereUniqueInput;
  disconnect?: messageWhereUniqueInput[] | messageWhereUniqueInput;
  update?:
    | messageUpdateWithWhereUniqueWithoutUserInput[]
    | messageUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | messageUpsertWithWhereUniqueWithoutUserInput[]
    | messageUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: messageScalarWhereInput[] | messageScalarWhereInput;
  updateMany?:
    | messageUpdateManyWithWhereNestedInput[]
    | messageUpdateManyWithWhereNestedInput;
}

export type userWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface messageUpdateWithWhereUniqueWithoutUserInput {
  where: messageWhereUniqueInput;
  data: messageUpdateWithoutUserDataInput;
}

export interface placeCreateInput {
  name: String;
  lat?: Float;
  lng?: Float;
  address: String;
  isFav?: Boolean;
  user?: userCreateOneWithoutPlaceInput;
}

export interface messageUpdateWithoutUserDataInput {
  text?: String;
  chat?: chatUpdateOneWithoutMessageInput;
}

export interface messageUpdateInput {
  text?: String;
  chat?: chatUpdateOneWithoutMessageInput;
  user?: userUpdateOneWithoutMessageInput;
}

export interface chatUpdateOneWithoutMessageInput {
  create?: chatCreateWithoutMessageInput;
  update?: chatUpdateWithoutMessageDataInput;
  upsert?: chatUpsertWithoutMessageInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: chatWhereUniqueInput;
}

export interface userCreateOneWithoutRideAsPassengerInput {
  create?: userCreateWithoutRideAsPassengerInput;
  connect?: userWhereUniqueInput;
}

export interface chatUpdateWithoutMessageDataInput {
  ride?: rideUpdateOneWithoutChatInput;
}

export interface chatCreateOneWithoutRideInput {
  create?: chatCreateWithoutRideInput;
  connect?: chatWhereUniqueInput;
}

export interface chatUpsertWithoutMessageInput {
  update: chatUpdateWithoutMessageDataInput;
  create: chatCreateWithoutMessageInput;
}

export interface userCreateOneWithoutMessageInput {
  create?: userCreateWithoutMessageInput;
  connect?: userWhereUniqueInput;
}

export interface messageUpsertWithWhereUniqueWithoutUserInput {
  where: messageWhereUniqueInput;
  update: messageUpdateWithoutUserDataInput;
  create: messageCreateWithoutUserInput;
}

export interface userWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  verifiedEmail?: Boolean;
  verifiedEmail_not?: Boolean;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  verifiedPhoneNumber?: Boolean;
  verifiedPhoneNumber_not?: Boolean;
  profilePhoto?: String;
  profilePhoto_not?: String;
  profilePhoto_in?: String[] | String;
  profilePhoto_not_in?: String[] | String;
  profilePhoto_lt?: String;
  profilePhoto_lte?: String;
  profilePhoto_gt?: String;
  profilePhoto_gte?: String;
  profilePhoto_contains?: String;
  profilePhoto_not_contains?: String;
  profilePhoto_starts_with?: String;
  profilePhoto_not_starts_with?: String;
  profilePhoto_ends_with?: String;
  profilePhoto_not_ends_with?: String;
  isDriving?: Boolean;
  isDriving_not?: Boolean;
  isRiding?: Boolean;
  isRiding_not?: Boolean;
  isTaken?: Boolean;
  isTaken_not?: Boolean;
  lastLng?: Float;
  lastLng_not?: Float;
  lastLng_in?: Float[] | Float;
  lastLng_not_in?: Float[] | Float;
  lastLng_lt?: Float;
  lastLng_lte?: Float;
  lastLng_gt?: Float;
  lastLng_gte?: Float;
  lastLat?: Float;
  lastLat_not?: Float;
  lastLat_in?: Float[] | Float;
  lastLat_not_in?: Float[] | Float;
  lastLat_lt?: Float;
  lastLat_lte?: Float;
  lastLat_gt?: Float;
  lastLat_gte?: Float;
  lastOrientation?: Float;
  lastOrientation_not?: Float;
  lastOrientation_in?: Float[] | Float;
  lastOrientation_not_in?: Float[] | Float;
  lastOrientation_lt?: Float;
  lastOrientation_lte?: Float;
  lastOrientation_gt?: Float;
  lastOrientation_gte?: Float;
  fbId?: String;
  fbId_not?: String;
  fbId_in?: String[] | String;
  fbId_not_in?: String[] | String;
  fbId_lt?: String;
  fbId_lte?: String;
  fbId_gt?: String;
  fbId_gte?: String;
  fbId_contains?: String;
  fbId_not_contains?: String;
  fbId_starts_with?: String;
  fbId_not_starts_with?: String;
  fbId_ends_with?: String;
  fbId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  rideAsPassenger_every?: rideWhereInput;
  rideAsPassenger_some?: rideWhereInput;
  rideAsPassenger_none?: rideWhereInput;
  rideAsDriver_every?: rideWhereInput;
  rideAsDriver_some?: rideWhereInput;
  rideAsDriver_none?: rideWhereInput;
  place_every?: placeWhereInput;
  place_some?: placeWhereInput;
  place_none?: placeWhereInput;
  message_every?: messageWhereInput;
  message_some?: messageWhereInput;
  message_none?: messageWhereInput;
  chat?: chatWhereInput;
  AND?: userWhereInput[] | userWhereInput;
  OR?: userWhereInput[] | userWhereInput;
  NOT?: userWhereInput[] | userWhereInput;
}

export interface messageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: messageScalarWhereInput[] | messageScalarWhereInput;
  OR?: messageScalarWhereInput[] | messageScalarWhereInput;
  NOT?: messageScalarWhereInput[] | messageScalarWhereInput;
}

export interface messageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: messageWhereInput;
  AND?: messageSubscriptionWhereInput[] | messageSubscriptionWhereInput;
  OR?: messageSubscriptionWhereInput[] | messageSubscriptionWhereInput;
  NOT?: messageSubscriptionWhereInput[] | messageSubscriptionWhereInput;
}

export interface messageUpdateManyWithWhereNestedInput {
  where: messageScalarWhereInput;
  data: messageUpdateManyDataInput;
}

export interface userCreateInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideCreateManyWithoutPassengerInput;
  rideAsDriver?: rideCreateManyWithoutDriverInput;
  place?: placeCreateManyWithoutUserInput;
  message?: messageCreateManyWithoutUserInput;
  chat?: chatCreateOneInput;
}

export interface messageUpdateManyDataInput {
  text?: String;
}

export interface userUpdateWithoutPlaceDataInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName?: String;
  lastName?: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto?: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideUpdateManyWithoutPassengerInput;
  rideAsDriver?: rideUpdateManyWithoutDriverInput;
  message?: messageUpdateManyWithoutUserInput;
  chat?: chatUpdateOneInput;
}

export interface chatUpdateOneInput {
  create?: chatCreateInput;
  update?: chatUpdateDataInput;
  upsert?: chatUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: chatWhereUniqueInput;
}

export interface messageUpdateManyMutationInput {
  text?: String;
}

export interface chatUpdateDataInput {
  ride?: rideUpdateOneWithoutChatInput;
  message?: messageUpdateOneWithoutChatInput;
}

export interface rideCreateOneWithoutChatInput {
  create?: rideCreateWithoutChatInput;
  connect?: rideWhereUniqueInput;
}

export interface chatUpsertNestedInput {
  update: chatUpdateDataInput;
  create: chatCreateInput;
}

export interface messageCreateOneWithoutChatInput {
  create?: messageCreateWithoutChatInput;
  connect?: messageWhereUniqueInput;
}

export interface userUpsertWithoutRideAsDriverInput {
  update: userUpdateWithoutRideAsDriverDataInput;
  create: userCreateWithoutRideAsDriverInput;
}

export interface verificationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: verificationWhereInput;
  AND?:
    | verificationSubscriptionWhereInput[]
    | verificationSubscriptionWhereInput;
  OR?:
    | verificationSubscriptionWhereInput[]
    | verificationSubscriptionWhereInput;
  NOT?:
    | verificationSubscriptionWhereInput[]
    | verificationSubscriptionWhereInput;
}

export interface rideUpsertWithWhereUniqueWithoutPassengerInput {
  where: rideWhereUniqueInput;
  update: rideUpdateWithoutPassengerDataInput;
  create: rideCreateWithoutPassengerInput;
}

export interface rideCreateInput {
  status?: String;
  pickupAddress: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance: String;
  duration: String;
  passenger?: userCreateOneWithoutRideAsPassengerInput;
  driver?: userCreateOneWithoutRideAsDriverInput;
  chat?: chatCreateOneWithoutRideInput;
}

export interface rideScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  pickupAddress?: String;
  pickupAddress_not?: String;
  pickupAddress_in?: String[] | String;
  pickupAddress_not_in?: String[] | String;
  pickupAddress_lt?: String;
  pickupAddress_lte?: String;
  pickupAddress_gt?: String;
  pickupAddress_gte?: String;
  pickupAddress_contains?: String;
  pickupAddress_not_contains?: String;
  pickupAddress_starts_with?: String;
  pickupAddress_not_starts_with?: String;
  pickupAddress_ends_with?: String;
  pickupAddress_not_ends_with?: String;
  pickupLat?: Float;
  pickupLat_not?: Float;
  pickupLat_in?: Float[] | Float;
  pickupLat_not_in?: Float[] | Float;
  pickupLat_lt?: Float;
  pickupLat_lte?: Float;
  pickupLat_gt?: Float;
  pickupLat_gte?: Float;
  pickupLng?: Float;
  pickupLng_not?: Float;
  pickupLng_in?: Float[] | Float;
  pickupLng_not_in?: Float[] | Float;
  pickupLng_lt?: Float;
  pickupLng_lte?: Float;
  pickupLng_gt?: Float;
  pickupLng_gte?: Float;
  dropOffAddress?: String;
  dropOffAddress_not?: String;
  dropOffAddress_in?: String[] | String;
  dropOffAddress_not_in?: String[] | String;
  dropOffAddress_lt?: String;
  dropOffAddress_lte?: String;
  dropOffAddress_gt?: String;
  dropOffAddress_gte?: String;
  dropOffAddress_contains?: String;
  dropOffAddress_not_contains?: String;
  dropOffAddress_starts_with?: String;
  dropOffAddress_not_starts_with?: String;
  dropOffAddress_ends_with?: String;
  dropOffAddress_not_ends_with?: String;
  dropOffLat?: Float;
  dropOffLat_not?: Float;
  dropOffLat_in?: Float[] | Float;
  dropOffLat_not_in?: Float[] | Float;
  dropOffLat_lt?: Float;
  dropOffLat_lte?: Float;
  dropOffLat_gt?: Float;
  dropOffLat_gte?: Float;
  dropOffLng?: Float;
  dropOffLng_not?: Float;
  dropOffLng_in?: Float[] | Float;
  dropOffLng_not_in?: Float[] | Float;
  dropOffLng_lt?: Float;
  dropOffLng_lte?: Float;
  dropOffLng_gt?: Float;
  dropOffLng_gte?: Float;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  distance?: String;
  distance_not?: String;
  distance_in?: String[] | String;
  distance_not_in?: String[] | String;
  distance_lt?: String;
  distance_lte?: String;
  distance_gt?: String;
  distance_gte?: String;
  distance_contains?: String;
  distance_not_contains?: String;
  distance_starts_with?: String;
  distance_not_starts_with?: String;
  distance_ends_with?: String;
  distance_not_ends_with?: String;
  duration?: String;
  duration_not?: String;
  duration_in?: String[] | String;
  duration_not_in?: String[] | String;
  duration_lt?: String;
  duration_lte?: String;
  duration_gt?: String;
  duration_gte?: String;
  duration_contains?: String;
  duration_not_contains?: String;
  duration_starts_with?: String;
  duration_not_starts_with?: String;
  duration_ends_with?: String;
  duration_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: rideScalarWhereInput[] | rideScalarWhereInput;
  OR?: rideScalarWhereInput[] | rideScalarWhereInput;
  NOT?: rideScalarWhereInput[] | rideScalarWhereInput;
}

export interface rideUpsertWithoutChatInput {
  update: rideUpdateWithoutChatDataInput;
  create: rideCreateWithoutChatInput;
}

export interface messageUpsertWithoutChatInput {
  update: messageUpdateWithoutChatDataInput;
  create: messageCreateWithoutChatInput;
}

export interface userUpsertWithoutMessageInput {
  update: userUpdateWithoutMessageDataInput;
  create: userCreateWithoutMessageInput;
}

export interface rideUpdateManyDataInput {
  status?: String;
  pickupAddress?: String;
  pickupLat?: Float;
  pickupLng?: Float;
  dropOffAddress?: String;
  dropOffLat?: Float;
  dropOffLng?: Float;
  price?: Float;
  distance?: String;
  duration?: String;
}

export interface rideUpdateManyWithWhereNestedInput {
  where: rideScalarWhereInput;
  data: rideUpdateManyDataInput;
}

export interface rideCreateManyWithoutDriverInput {
  create?: rideCreateWithoutDriverInput[] | rideCreateWithoutDriverInput;
  connect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
}

export interface userCreateWithoutPlaceInput {
  email?: String;
  verifiedEmail?: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber?: Boolean;
  profilePhoto: String;
  isDriving?: Boolean;
  isRiding?: Boolean;
  isTaken?: Boolean;
  lastLng?: Float;
  lastLat?: Float;
  lastOrientation?: Float;
  fbId?: String;
  rideAsPassenger?: rideCreateManyWithoutPassengerInput;
  rideAsDriver?: rideCreateManyWithoutDriverInput;
  message?: messageCreateManyWithoutUserInput;
  chat?: chatCreateOneInput;
}

export interface verificationCreateInput {
  target: String;
  payload: String;
  key: String;
  verified?: Boolean;
}

export interface rideCreateManyWithoutPassengerInput {
  create?: rideCreateWithoutPassengerInput[] | rideCreateWithoutPassengerInput;
  connect?: rideWhereUniqueInput[] | rideWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface verificationPreviousValues {
  id: ID_Output;
  target: String;
  payload: String;
  key: String;
  verified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface verificationPreviousValuesPromise
  extends Promise<verificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  target: () => Promise<String>;
  payload: () => Promise<String>;
  key: () => Promise<String>;
  verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface verificationPreviousValuesSubscription
  extends Promise<AsyncIterator<verificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  target: () => Promise<AsyncIterator<String>>;
  payload: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface messageEdge {
  node: message;
  cursor: String;
}

export interface messageEdgePromise extends Promise<messageEdge>, Fragmentable {
  node: <T = messagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface messageEdgeSubscription
  extends Promise<AsyncIterator<messageEdge>>,
    Fragmentable {
  node: <T = messageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ridePreviousValues {
  id: ID_Output;
  status: String;
  pickupAddress: String;
  pickupLat: Float;
  pickupLng: Float;
  dropOffAddress: String;
  dropOffLat: Float;
  dropOffLng: Float;
  price: Float;
  distance: String;
  duration: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ridePreviousValuesPromise
  extends Promise<ridePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  pickupAddress: () => Promise<String>;
  pickupLat: () => Promise<Float>;
  pickupLng: () => Promise<Float>;
  dropOffAddress: () => Promise<String>;
  dropOffLat: () => Promise<Float>;
  dropOffLng: () => Promise<Float>;
  price: () => Promise<Float>;
  distance: () => Promise<String>;
  duration: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ridePreviousValuesSubscription
  extends Promise<AsyncIterator<ridePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  pickupAddress: () => Promise<AsyncIterator<String>>;
  pickupLat: () => Promise<AsyncIterator<Float>>;
  pickupLng: () => Promise<AsyncIterator<Float>>;
  dropOffAddress: () => Promise<AsyncIterator<String>>;
  dropOffLat: () => Promise<AsyncIterator<Float>>;
  dropOffLng: () => Promise<AsyncIterator<Float>>;
  price: () => Promise<AsyncIterator<Float>>;
  distance: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface messageConnection {
  pageInfo: PageInfo;
  edges: messageEdge[];
}

export interface messageConnectionPromise
  extends Promise<messageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<messageEdge>>() => T;
  aggregate: <T = AggregatemessagePromise>() => T;
}

export interface messageConnectionSubscription
  extends Promise<AsyncIterator<messageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<messageEdgeSubscription>>>() => T;
  aggregate: <T = AggregatemessageSubscription>() => T;
}

export interface chatEdge {
  node: chat;
  cursor: String;
}

export interface chatEdgePromise extends Promise<chatEdge>, Fragmentable {
  node: <T = chatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface chatEdgeSubscription
  extends Promise<AsyncIterator<chatEdge>>,
    Fragmentable {
  node: <T = chatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatechat {
  count: Int;
}

export interface AggregatechatPromise
  extends Promise<Aggregatechat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatechatSubscription
  extends Promise<AsyncIterator<Aggregatechat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Aggregateverification {
  count: Int;
}

export interface AggregateverificationPromise
  extends Promise<Aggregateverification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateverificationSubscription
  extends Promise<AsyncIterator<Aggregateverification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface verificationConnection {
  pageInfo: PageInfo;
  edges: verificationEdge[];
}

export interface verificationConnectionPromise
  extends Promise<verificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<verificationEdge>>() => T;
  aggregate: <T = AggregateverificationPromise>() => T;
}

export interface verificationConnectionSubscription
  extends Promise<AsyncIterator<verificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<verificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateverificationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface verification {
  id: ID_Output;
  target: String;
  payload: String;
  key: String;
  verified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface verificationPromise
  extends Promise<verification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  target: () => Promise<String>;
  payload: () => Promise<String>;
  key: () => Promise<String>;
  verified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface verificationSubscription
  extends Promise<AsyncIterator<verification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  target: () => Promise<AsyncIterator<String>>;
  payload: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface chatConnection {
  pageInfo: PageInfo;
  edges: chatEdge[];
}

export interface chatConnectionPromise
  extends Promise<chatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<chatEdge>>() => T;
  aggregate: <T = AggregatechatPromise>() => T;
}

export interface chatConnectionSubscription
  extends Promise<AsyncIterator<chatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<chatEdgeSubscription>>>() => T;
  aggregate: <T = AggregatechatSubscription>() => T;
}

export interface userEdge {
  node: user;
  cursor: String;
}

export interface userEdgePromise extends Promise<userEdge>, Fragmentable {
  node: <T = userPromise>() => T;
  cursor: () => Promise<String>;
}

export interface userEdgeSubscription
  extends Promise<AsyncIterator<userEdge>>,
    Fragmentable {
  node: <T = userSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface userSubscriptionPayload {
  mutation: MutationType;
  node: user;
  updatedFields: String[];
  previousValues: userPreviousValues;
}

export interface userSubscriptionPayloadPromise
  extends Promise<userSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = userPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = userPreviousValuesPromise>() => T;
}

export interface userSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<userSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = userSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = userPreviousValuesSubscription>() => T;
}

export interface ride {
  id: ID_Output;
  status: String;
  pickupAddress: String;
  pickupLat: Float;
  pickupLng: Float;
  dropOffAddress: String;
  dropOffLat: Float;
  dropOffLng: Float;
  price: Float;
  distance: String;
  duration: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ridePromise extends Promise<ride>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<String>;
  pickupAddress: () => Promise<String>;
  pickupLat: () => Promise<Float>;
  pickupLng: () => Promise<Float>;
  dropOffAddress: () => Promise<String>;
  dropOffLat: () => Promise<Float>;
  dropOffLng: () => Promise<Float>;
  price: () => Promise<Float>;
  distance: () => Promise<String>;
  duration: () => Promise<String>;
  passenger: <T = userPromise>() => T;
  driver: <T = userPromise>() => T;
  chat: <T = chatPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface rideSubscription
  extends Promise<AsyncIterator<ride>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<String>>;
  pickupAddress: () => Promise<AsyncIterator<String>>;
  pickupLat: () => Promise<AsyncIterator<Float>>;
  pickupLng: () => Promise<AsyncIterator<Float>>;
  dropOffAddress: () => Promise<AsyncIterator<String>>;
  dropOffLat: () => Promise<AsyncIterator<Float>>;
  dropOffLng: () => Promise<AsyncIterator<Float>>;
  price: () => Promise<AsyncIterator<Float>>;
  distance: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  passenger: <T = userSubscription>() => T;
  driver: <T = userSubscription>() => T;
  chat: <T = chatSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface chat {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface chatPromise extends Promise<chat>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  ride: <T = ridePromise>() => T;
  message: <T = messagePromise>() => T;
}

export interface chatSubscription
  extends Promise<AsyncIterator<chat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ride: <T = rideSubscription>() => T;
  message: <T = messageSubscription>() => T;
}

export interface rideEdge {
  node: ride;
  cursor: String;
}

export interface rideEdgePromise extends Promise<rideEdge>, Fragmentable {
  node: <T = ridePromise>() => T;
  cursor: () => Promise<String>;
}

export interface rideEdgeSubscription
  extends Promise<AsyncIterator<rideEdge>>,
    Fragmentable {
  node: <T = rideSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface chatSubscriptionPayload {
  mutation: MutationType;
  node: chat;
  updatedFields: String[];
  previousValues: chatPreviousValues;
}

export interface chatSubscriptionPayloadPromise
  extends Promise<chatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = chatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = chatPreviousValuesPromise>() => T;
}

export interface chatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<chatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = chatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = chatPreviousValuesSubscription>() => T;
}

export interface Aggregateplace {
  count: Int;
}

export interface AggregateplacePromise
  extends Promise<Aggregateplace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateplaceSubscription
  extends Promise<AsyncIterator<Aggregateplace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface chatPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface chatPreviousValuesPromise
  extends Promise<chatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface chatPreviousValuesSubscription
  extends Promise<AsyncIterator<chatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface placeConnection {
  pageInfo: PageInfo;
  edges: placeEdge[];
}

export interface placeConnectionPromise
  extends Promise<placeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<placeEdge>>() => T;
  aggregate: <T = AggregateplacePromise>() => T;
}

export interface placeConnectionSubscription
  extends Promise<AsyncIterator<placeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<placeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateplaceSubscription>() => T;
}

export interface message {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface messagePromise extends Promise<message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  chat: <T = chatPromise>() => T;
  user: <T = userPromise>() => T;
}

export interface messageSubscription
  extends Promise<AsyncIterator<message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  chat: <T = chatSubscription>() => T;
  user: <T = userSubscription>() => T;
}

export interface verificationEdge {
  node: verification;
  cursor: String;
}

export interface verificationEdgePromise
  extends Promise<verificationEdge>,
    Fragmentable {
  node: <T = verificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface verificationEdgeSubscription
  extends Promise<AsyncIterator<verificationEdge>>,
    Fragmentable {
  node: <T = verificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface messageSubscriptionPayload {
  mutation: MutationType;
  node: message;
  updatedFields: String[];
  previousValues: messagePreviousValues;
}

export interface messageSubscriptionPayloadPromise
  extends Promise<messageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = messagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = messagePreviousValuesPromise>() => T;
}

export interface messageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<messageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = messageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = messagePreviousValuesSubscription>() => T;
}

export interface userPreviousValues {
  id: ID_Output;
  email?: String;
  verifiedEmail: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber: Boolean;
  profilePhoto: String;
  isDriving: Boolean;
  isRiding: Boolean;
  isTaken: Boolean;
  lastLng: Float;
  lastLat: Float;
  lastOrientation: Float;
  fbId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface userPreviousValuesPromise
  extends Promise<userPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  verifiedEmail: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  age: () => Promise<Int>;
  password: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  verifiedPhoneNumber: () => Promise<Boolean>;
  profilePhoto: () => Promise<String>;
  isDriving: () => Promise<Boolean>;
  isRiding: () => Promise<Boolean>;
  isTaken: () => Promise<Boolean>;
  lastLng: () => Promise<Float>;
  lastLat: () => Promise<Float>;
  lastOrientation: () => Promise<Float>;
  fbId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface userPreviousValuesSubscription
  extends Promise<AsyncIterator<userPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  verifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  verifiedPhoneNumber: () => Promise<AsyncIterator<Boolean>>;
  profilePhoto: () => Promise<AsyncIterator<String>>;
  isDriving: () => Promise<AsyncIterator<Boolean>>;
  isRiding: () => Promise<AsyncIterator<Boolean>>;
  isTaken: () => Promise<AsyncIterator<Boolean>>;
  lastLng: () => Promise<AsyncIterator<Float>>;
  lastLat: () => Promise<AsyncIterator<Float>>;
  lastOrientation: () => Promise<AsyncIterator<Float>>;
  fbId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface messagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface messagePreviousValuesPromise
  extends Promise<messagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface messagePreviousValuesSubscription
  extends Promise<AsyncIterator<messagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface userConnection {
  pageInfo: PageInfo;
  edges: userEdge[];
}

export interface userConnectionPromise
  extends Promise<userConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<userEdge>>() => T;
  aggregate: <T = AggregateuserPromise>() => T;
}

export interface userConnectionSubscription
  extends Promise<AsyncIterator<userConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<userEdgeSubscription>>>() => T;
  aggregate: <T = AggregateuserSubscription>() => T;
}

export interface user {
  id: ID_Output;
  email?: String;
  verifiedEmail: Boolean;
  firstName: String;
  lastName: String;
  age?: Int;
  password?: String;
  phoneNumber?: String;
  verifiedPhoneNumber: Boolean;
  profilePhoto: String;
  isDriving: Boolean;
  isRiding: Boolean;
  isTaken: Boolean;
  lastLng: Float;
  lastLat: Float;
  lastOrientation: Float;
  fbId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface userPromise extends Promise<user>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  verifiedEmail: () => Promise<Boolean>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  age: () => Promise<Int>;
  password: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  verifiedPhoneNumber: () => Promise<Boolean>;
  profilePhoto: () => Promise<String>;
  isDriving: () => Promise<Boolean>;
  isRiding: () => Promise<Boolean>;
  isTaken: () => Promise<Boolean>;
  lastLng: () => Promise<Float>;
  lastLat: () => Promise<Float>;
  lastOrientation: () => Promise<Float>;
  fbId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  rideAsPassenger: <T = FragmentableArray<ride>>(
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rideAsDriver: <T = FragmentableArray<ride>>(
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  place: <T = FragmentableArray<place>>(
    args?: {
      where?: placeWhereInput;
      orderBy?: placeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  message: <T = FragmentableArray<message>>(
    args?: {
      where?: messageWhereInput;
      orderBy?: messageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chat: <T = chatPromise>() => T;
}

export interface userSubscription
  extends Promise<AsyncIterator<user>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  verifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  verifiedPhoneNumber: () => Promise<AsyncIterator<Boolean>>;
  profilePhoto: () => Promise<AsyncIterator<String>>;
  isDriving: () => Promise<AsyncIterator<Boolean>>;
  isRiding: () => Promise<AsyncIterator<Boolean>>;
  isTaken: () => Promise<AsyncIterator<Boolean>>;
  lastLng: () => Promise<AsyncIterator<Float>>;
  lastLat: () => Promise<AsyncIterator<Float>>;
  lastOrientation: () => Promise<AsyncIterator<Float>>;
  fbId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  rideAsPassenger: <T = Promise<AsyncIterator<rideSubscription>>>(
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rideAsDriver: <T = Promise<AsyncIterator<rideSubscription>>>(
    args?: {
      where?: rideWhereInput;
      orderBy?: rideOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  place: <T = Promise<AsyncIterator<placeSubscription>>>(
    args?: {
      where?: placeWhereInput;
      orderBy?: placeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  message: <T = Promise<AsyncIterator<messageSubscription>>>(
    args?: {
      where?: messageWhereInput;
      orderBy?: messageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  chat: <T = chatSubscription>() => T;
}

export interface rideConnection {
  pageInfo: PageInfo;
  edges: rideEdge[];
}

export interface rideConnectionPromise
  extends Promise<rideConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<rideEdge>>() => T;
  aggregate: <T = AggregateridePromise>() => T;
}

export interface rideConnectionSubscription
  extends Promise<AsyncIterator<rideConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<rideEdgeSubscription>>>() => T;
  aggregate: <T = AggregaterideSubscription>() => T;
}

export interface Aggregatemessage {
  count: Int;
}

export interface AggregatemessagePromise
  extends Promise<Aggregatemessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatemessageSubscription
  extends Promise<AsyncIterator<Aggregatemessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface rideSubscriptionPayload {
  mutation: MutationType;
  node: ride;
  updatedFields: String[];
  previousValues: ridePreviousValues;
}

export interface rideSubscriptionPayloadPromise
  extends Promise<rideSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ridePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ridePreviousValuesPromise>() => T;
}

export interface rideSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<rideSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = rideSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ridePreviousValuesSubscription>() => T;
}

export interface place {
  id: ID_Output;
  name: String;
  lat: Float;
  lng: Float;
  address: String;
  isFav: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface placePromise extends Promise<place>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  address: () => Promise<String>;
  isFav: () => Promise<Boolean>;
  user: <T = userPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface placeSubscription
  extends Promise<AsyncIterator<place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  isFav: () => Promise<AsyncIterator<Boolean>>;
  user: <T = userSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface placePreviousValues {
  id: ID_Output;
  name: String;
  lat: Float;
  lng: Float;
  address: String;
  isFav: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface placePreviousValuesPromise
  extends Promise<placePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  address: () => Promise<String>;
  isFav: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface placePreviousValuesSubscription
  extends Promise<AsyncIterator<placePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  address: () => Promise<AsyncIterator<String>>;
  isFav: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface placeSubscriptionPayload {
  mutation: MutationType;
  node: place;
  updatedFields: String[];
  previousValues: placePreviousValues;
}

export interface placeSubscriptionPayloadPromise
  extends Promise<placeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = placePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = placePreviousValuesPromise>() => T;
}

export interface placeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<placeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = placeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = placePreviousValuesSubscription>() => T;
}

export interface verificationSubscriptionPayload {
  mutation: MutationType;
  node: verification;
  updatedFields: String[];
  previousValues: verificationPreviousValues;
}

export interface verificationSubscriptionPayloadPromise
  extends Promise<verificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = verificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = verificationPreviousValuesPromise>() => T;
}

export interface verificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<verificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = verificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = verificationPreviousValuesSubscription>() => T;
}

export interface placeEdge {
  node: place;
  cursor: String;
}

export interface placeEdgePromise extends Promise<placeEdge>, Fragmentable {
  node: <T = placePromise>() => T;
  cursor: () => Promise<String>;
}

export interface placeEdgeSubscription
  extends Promise<AsyncIterator<placeEdge>>,
    Fragmentable {
  node: <T = placeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregateride {
  count: Int;
}

export interface AggregateridePromise
  extends Promise<Aggregateride>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregaterideSubscription
  extends Promise<AsyncIterator<Aggregateride>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Aggregateuser {
  count: Int;
}

export interface AggregateuserPromise
  extends Promise<Aggregateuser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateuserSubscription
  extends Promise<AsyncIterator<Aggregateuser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "verification",
    embedded: false
  },
  {
    name: "ride",
    embedded: false
  },
  {
    name: "place",
    embedded: false
  },
  {
    name: "message",
    embedded: false
  },
  {
    name: "user",
    embedded: false
  },
  {
    name: "chat",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
